apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

android {
    compileSdkVersion Vers.androidCompileSdk

    lintOptions {
        abortOnError true
    }

    defaultConfig {
        applicationId myintent_pkg
        versionCode myintent_code
        versionName myintent_name
        minSdkVersion 26
        targetSdkVersion Vers.androidTargetSdk
        testInstrumentationRunner Vers.androidTestRunnerClass
        multiDexEnabled true
    }

    signingConfigs {
        release {
            // TODO SOMEDAY: different config for release
            storeFile file('keystore/open.keystore.jks')
            keyAlias 'openkey'
            storePassword 'openkey'
            keyPassword 'openkey'
        }
//        release {
//            storeFile file(System.getenv("MYINTENT_STORE_FILE"))
//            storePassword System.getenv("MYINTENT_STORE_PASSWORD")
//            keyAlias System.getenv("MYINTENT_KEY_ALIAS")
//            keyPassword System.getenv("MYINTENT_KEY_PASSWORD")
//        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            //noinspection GrUnresolvedAccess,GroovyAssignabilityCheck
            signingConfig signingConfigs.release
            def auth = myintent_pkg + ".provider"
            resValue "string", "mi_authority", auth
            buildConfigField "String", "AUTHORITY", "\"$auth\""
            buildConfigField "String", "NAME_PREFIX", '"MI "'
            def perm = auth + ".WRITE"
            resValue "string", "mi_permission_write", perm
        }
        debug {
            def suff = ".debug"
            applicationIdSuffix suff
            def auth = myintent_pkg + suff + ".provider"
            resValue "string", "mi_authority", auth
            buildConfigField "String", "AUTHORITY", "\"$auth\""
            buildConfigField "String", "NAME_PREFIX", '"MI D "'
            def perm = auth + ".WRITE"
            resValue "string", "mi_permission_write", perm
        }
//        canary {
//            initWith(buildTypes.debug)
//            def suff = ".canary"
//            applicationIdSuffix suff
//            def auth = myintent_pkg + suff + ".provider"
//            resValue "string", "mi_authority", auth
//            buildConfigField "String", "AUTHORITY", "\"$auth\""
//            buildConfigField "String", "NAME_PREFIX", '"MI C "'
//            def perm = auth + ".WRITE"
//            resValue "string", "mi_permission_write", perm
//        }
    }
    packagingOptions {
        exclude 'META-INF/rxjava.properties'
    }
    testOptions {
        unitTests.returnDefaultValues = true
    }
    resourcePrefix 'mi_'
    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation Deps.androidMaterial
    implementation Deps.androidxAppcompat
    implementation Deps.androidxRecyclerview
    implementation Deps.androidxAnnotation
    implementation Deps.okhttp
    implementation Deps.retrofit

    testImplementation Deps.junit4
    testImplementation Deps.googleTruth
    androidTestImplementation Deps.junit4
    androidTestImplementation Deps.googleTruth
    androidTestImplementation Deps.androidxAnnotation
    androidTestImplementation Deps.androidTestRunner
    androidTestImplementation Deps.androidTestRules

//    canaryImplementation Deps.leakcanary

    implementation(Deps.materialDialogs)

    implementation project(':myactivities')
    implementation project(':myfragments')
    implementation project(':myloggers')
    implementation project(':myres')
    implementation project(':myutils')
    implementation project(':myviews')
    implementation project(':mydrawables')
    implementation Deps.kotlinStdlib8
    implementation Deps.googlePlayServicesBase
    implementation platform(Deps.firebaseAndroidBoM)
    implementation 'com.google.firebase:firebase-appindexing'
    implementation Deps.paperwork
}
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath Deps.paperworkPlugin
    }
}

apply plugin: 'hu.supercluster.paperwork'
paperwork {
    set = [
            buildTime: buildTime("yyyy-MM-dd HH:mm:ss"),
            gitSha: gitSha(),
            gitTag: gitTag(),
            gitInfo: gitInfo()
    ]
}


// build a jar with source files
task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

//task javadoc(type: Javadoc) {
//    failOnError false
//    source = android.sourceSets.main.java.sourceFiles
//    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
//}
//
//// build a jar with javadoc
//task javadocJar(type: Jar, dependsOn: javadoc) {
//    classifier = 'javadoc'
//    from javadoc.getDestinationDir()
//}

artifacts {
    archives sourcesJar
//    archives javadocJar
}
